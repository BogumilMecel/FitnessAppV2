import com.gmail.bogumilmecel2.fitnessappv2.common.domain.model.NutritionValues;
import com.gmail.bogumilmecel2.fitnessappv2.feature_diary.domain.model.MealName;
import kotlin.Boolean;
import kotlin.Int;
import kotlinx.datetime.LocalDate;
import kotlinx.datetime.LocalDateTime;

CREATE TABLE IF NOT EXISTS SqlRecipeDiaryEntry (
    id TEXT PRIMARY KEY,
    nutrition_values TEXT AS NutritionValues,
    user_id TEXT,
    date TEXT AS LocalDate,
    meal_name TEXT AS MealName,
    creation_date_time TEXT AS LocalDateTime,
    change_date_time TEXT AS LocalDateTime,
    recipe_name TEXT,
    recipe_id TEXT,
    servings INTEGER AS Int,
    deleted INTEGER AS Boolean NOT NULL
);

-- Insert single recipe diary entry
insertRecipeDiaryEntry:
INSERT OR REPLACE INTO SqlRecipeDiaryEntry VALUES (
  :id, :nutritionValues, :userId,
  :date, :mealName, :creationDateTime, :changeDateTime, :recipeName,
  :recipeId, :servings, :deleted
);

-- Get recipe diary entries
getRecipeDiaryEntries:
SELECT * FROM SqlRecipeDiaryEntry
WHERE (:searchText IS NULL OR recipe_name LIKE '%' || :searchText || '%')
GROUP BY recipe_id
ORDER BY creation_date_time DESC LIMIT :limit OFFSET :offset;

-- Get all recipe diary entries
getAllRecipeDiaryEntries:
SELECT * FROM SqlRecipeDiaryEntry ORDER BY creation_date_time DESC LIMIT :limit;

-- Get recipe diary entries by date
getRecipeDiaryEntriesByDate:
SELECT * FROM SqlRecipeDiaryEntry WHERE date = :date ORDER BY creation_date_time DESC;

-- Delete recipe diary entry
deleteRecipeDiaryEntry:
DELETE FROM SqlRecipeDiaryEntry WHERE id = :recipeDiaryEntryId;

-- Delete recipe diary entries
deleteRecipeDiaryEntries:
DELETE FROM SqlRecipeDiaryEntry WHERE date = :date;

-- Get recipe diary entries' nutrition values by date
getRecipeDiaryEntriesNutritionValues:
SELECT nutrition_values FROM SqlRecipeDiaryEntry WHERE date = :date;